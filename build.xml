<?xml version="1.0" encoding="UTF-8"?>

<project name="Build a WordPress Install" default="help" basedir="./">

    <!-- Load the configuration file -->
    <property file="build.properties" />
    
    <!-- set a temp dirs -->
    <property name="build.dir.tmp.plugins" value="${build.dir.tmp}/plugins"/>
    <property name="build.dir.tmp.themes" value="${build.dir.tmp}/themes"/>

	<tstamp>
		<!-- Format is, e.g. Sat, 03 Oct 2009, 16:31 -->
		<format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
	</tstamp>

	<!-- Create the database -->
	<!-- Errors are handled by mySQL 
-------------------------------------------------------------------------- -->

	<target name="database">
	    <taskdef name="pdosqlexec" classname="phing.tasks.ext.pdo.PDOSQLExecTask"/>
	    <pdosqlexec url="${build.db.url}"
	                userid="${build.db.userid}"
	                password="${build.db.password}"
	                onerror="abort"
	                autocommit="true">
	        CREATE DATABASE ${build.db.name};
	    </pdosqlexec>        
	</target>

    <!-- Clean the build directory this does not have any error checking !
-------------------------------------------------------------------------- -->

    <target name="clean" description="Deletes previous WordPress install directory">

        <echo msg="Cleaning build directory" />
        
        <!-- remove root location -->
        <delete dir="${build.dir.wp}" includeemptydirs="true" failonerror="true" />
        
        <!-- remove temp location -->
        <delete dir="${build.dir.tmp}" includeemptydirs="true" failonerror="true" />
        
    </target>

    <!-- Prepare the build directory 
--------------------------------------------------------------------------- -->

    <target name="prepare" depends="clean" description="Creating new WordPress directory">

        <echo msg="Preparing build directory" />
        
        <!-- create our root location -->
        <mkdir dir="${build.dir.wp}" />
               
        <!-- create temp directories for downloads -->
        <mkdir dir="${build.dir.tmp}" />
        <mkdir dir="${build.dir.tmp.plugins}" />
        <mkdir dir="${build.dir.tmp.themes}" />
        
    </target>
    
    <!-- Download WordPress from .org 
----------------------------------------------------------------------------- -->
	<target name="installwordpress" description="Download WordPress">

		<!-- download our wordpress zip -->
		<httpget url="${build.download.wp.url}" dir="${build.dir.tmp}" />

		<!-- unzip wordpress - unable to extract to same dir -->
		<untar todir="${build.dir.tmp.plugins}" >
			<fileset dir="${build.dir.tmp}">
				<include name="*.tar.gz"/>
			</fileset>
		</untar>

		<!-- move to dest  -->
		<copy todir="${build.dir.wp}" includeemptydirs="true">

			<fileset dir="${build.dir.tmp.plugins}/wordpress" >
			  <include name="**" />
			</fileset>
  
		</copy>

    </target>

    <!-- Download WordPress Plugins 
--------------------------------------------------------------------------------- -->

	<target name="downloadplugin" description="Download WordPress Plugin">

		<!-- download our plugin zip :: note this expects a standard wordpress packaged plugin file -->
		<httpget url="${wppluginurl}" dir="${build.dir.tmp.plugins}" />

    </target>
    
   
    <!-- Loop over properties list of wp plugins to install 
--------------------------------------------------------------------------------- -->
	<target name="installplugins" description="Download Plugins" >

		<!-- TODO - add a file of newline delimited plugin urls -->

		<!-- defined via properties file -->
		<foreach list="${build.download.plugin.urls}" param="wppluginurl" target="downloadplugin" />

		<!-- unzip our collection of plugins -->
		<unzip todir="${build.dir.wp}/wp-content/plugins" >
			<fileset dir="${build.dir.tmp.plugins}">
				<include name="*.zip"/>
			</fileset>
		</unzip>

		<!-- clean up zip files -->
		<delete>
			<fileset dir="${build.dir.tmp.plugins}">
				<include name="*.zip"/>
			</fileset>
		</delete>

	</target>

	<!-- Download WordPress Themes 
---------------------------------------------------------------------------------- -->
	<target name="downloadtheme" description="Download WordPress Themes">

		<!-- download our plugin zip :: note this expects a standard wordpress packaged plugin file -->
		<httpget url="${wpthemeurl}" dir="${build.dir.tmp.themes}" />

    </target>
    
   
    <!-- Loop over properties list of wp themes to install 
---------------------------------------------------------------------------------  -->
	<target name="installthemes" description="Install themes" >

		<!-- TODO - add a file of newline delimited plugin urls -->

		<!-- defined via properties file -->
		<foreach list="${build.download.themes.urls}" param="wpthemeurl" target="downloadtheme" />

		<!-- unzip our collection of plugins -->
		<unzip todir="${build.dir.wp}/wp-content/themes" >
			<fileset dir="${build.dir.tmp.themes}">
				<include name="*.zip"/>
			</fileset>
		</unzip>

		<!-- clean up zip files -->
		<delete>
			<fileset dir="${build.dir.tmp.themes}">
				<include name="*.zip"/>
			</fileset>
		</delete>

	</target>

<!-- Update the wp-config.php file
---------------------------------------------------------------------------------  -->

	<target name="updatewpconfig">

		<!-- append needed settings to wp-config.php file -->
		<if>
			<isset property="build.db.name"/>
			<then>

				<echo msg="Adding db connection info to wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('DB_NAME', ')\w+('\);)" replace="\1${build.db.name}\2"/>
							<regexp pattern="(define\('DB_USER', ')\w+('\);)" replace="\1${build.db.userid}\2"/>
							<regexp pattern="(define\('DB_PASSWORD', ')\w+('\);)" replace="\1${build.db.password}\2"/>
							<regexp pattern="(define\('DB_HOST', ')\w+('\);)" replace="\1${build.db.wp.host}\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- append additional files to wp-config.php file -->
		<if>
			<isset property="build.wp.config.append.filename"/>
			<then>

				<echo msg="Adding external configs to wp-config.php" />

				<!-- a token exists around the salt keys - lets find/replace/add for next step - hookie -->
				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(\/**#@-*\/)" replace="\1 ${line.separator}${line.separator} #!${build.wp.config.append.filename}!##"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- enable debug mode to wp-config.php file -->
		<if>
			<isset property="build.wp.config.debug"/>
			<then>

				<echo msg="Setting WP_DEBUG in wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('WP_DEBUG', )\w+(\);)" replace="\1true\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- enable SAVEQUERIES  debug  to wp-config.php file -->
		<if>
			<isset property="build.wp.config.savequeries"/>
			<then>

				<echo msg="Setting SAVEQUERIES in wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="(define\('SAVEQUERIES', )\w+(\);)" replace="\1true\2"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>		

		<!-- replace the wp_ db prefix -->
		<if>
			<isset property="build.wp.config.db.prefix"/>
			<then>

				<echo msg="Adding db prefix to wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replaceregexp>
							<regexp pattern="((\w+)  = 'wp_';)" replace="\2 = '${build.wp.config.db.prefix}';"/>
						</replaceregexp>
					</filterchain>
				</reflexive>

			</then>
		</if>

		<!-- TODO - download salt api https://api.wordpress.org/secret-key/1.1/salt/ and inject - wp-config already contains tokens around salt section -->

		<!-- TODO - we could download a lang here and change wplang settings -->


		<!-- append additional settings to wp-config.php file -->

		<if>
			<isset property="build.wp.config.append.filename"/>
			<then>

				<echo msg="Appending ${build.wp.config.append.filename} to wp-config.php" />

				<reflexive file="${build.dir.wp}/wp-config.php">
					<filterchain>
						<replacetokenswithfile begintoken="#!" endtoken="##" />
					</filterchain>
				</reflexive>

			</then>
		</if>

	</target>

 	<!-- Delete temp dir !-->
    <target name="cleantmp" description="Deletes tmp directory needed for install">

        <echo msg="Cleaning tmp directory" />
        
        <!-- remove temp location -->
        <delete dir="${build.dir.tmp}" includeemptydirs="true" failonerror="true" />
        
    </target>

    
	<!-- Our main installer * This will install the DB and WordPress
------------------------------------------------------------------------------ -->

	<target name="install" depends="prepare">

		<phingcall target="database" />

		<echo msg="Created a new database" />
		
		<phingcall target="installwordpress" />
			
        <echo msg="Copying wp-config.php" />

		<copy file="${build.dir.wp}/wp-config-sample.php" tofile="${build.dir.wp}/wp-config.php" />

		<!-- overwrite values in wp-config.php -->
		<phingcall target="updatewpconfig" />

		<!-- install additional wp plugins -->
		<if>
			<isset property="build.download.plugin.urls"/>
			<then>

				<phingcall target="installplugins" />

				<echo msg="Installing plugins" />

			</then>
		</if>

		
       <!--  Permissions - every system is different - customize this based on your environment.
             this won't work on windows -->
<!--
        <chown file="${build.dir.wp}" user="www-data.www-data" verbose="true" />
        <chmod file="${build.dir.wp}" mode="0755" verbose="true" />
-->    

        <!-- just a timestamp in wp-config.php -->
        <append destFile="${build.dir.wp}/wp-config.php" text="${line.separator}${line.separator}/* WordPhing'd this install on ${buildtime} */${line.separator}" />

        <phingcall target="cleantmp" />

        <echo msg="All done" />

	</target>


		<!-- WordPress only installer * This will install WordPress (not the DB)
------------------------------------------------------------------------------ -->

	<target name="install-wp" depends="prepare">

		<!-- if this is a standard wordpress.org build -->

		<phingcall target="installwordpress" />
			
        <echo msg="Copying wp-config.php" />

		<copy file="${build.dir.wp}/wp-config-sample.php" tofile="${build.dir.wp}/wp-config.php" />

		<!-- overwrite values in wp-config.php -->
		<phingcall target="updatewpconfig" />

		<!-- install additional wp plugins -->
		<if>
			<isset property="build.download.plugin.urls"/>
			<then>

				<phingcall target="installplugins" />

				<echo msg="Installing plugins" />

			</then>
		</if>

		
       <!--  Permissions - every system is different - customize this based on your environment.
             this won't work on windows -->
<!--
        <chown file="${build.dir.wp}" user="www-data.www-data" verbose="true" />
        <chmod file="${build.dir.wp}" mode="0755" verbose="true" />
-->    

        <!-- just a timestamp in wp-config.php -->
        <append destFile="${build.dir.wp}/wp-config.php" text="${line.separator}${line.separator}/* WordPhing'd this install on ${buildtime} */${line.separator}" />

        <phingcall target="cleantmp" />

        <echo msg="All done" />

	</target>


    <!-- Display the available options 
-------------------------------------------------------------------- -->

    <target name="help" description="Displays the available options">

        <echo msg="Build options" />
        <echo msg="------------------" />
        
        <echo msg="$ phing install - Creates a new database, downloads and installs WordPress and Plugins" />
        <echo msg="$ phing install-wp - Downloads and installs WordPress and Plugins" />
        <echo msg="$ phing help - Displays the available options" />

        
    </target>

</project>